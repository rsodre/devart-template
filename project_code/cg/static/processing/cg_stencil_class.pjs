//
//  Stencil class v1.0
//  By Roger Sodre
//
class StencilClass
{
	PImage myStencil = null;
	String myName = "";
	PVector myCenter = new PVector( 0, 0 );
	PVector mousePos = new PVector( 0, 0 );
	float myScale = 1.0;
	float myRotation = 0.0;
	float myRadius = 0.0;
	int maxRadius = 100;
	// interaction;
	boolean isMoving = false;
	boolean isScaling = false;
	boolean inMoving = false;
	boolean inScaling = false;
	float lastScale = 1.0;
	float lastRotation  = 1.0;
	// constants
	float pick_range = 0.2;
	color color_shadow = color(50);
	color color_off = color(200);
	color color_over = color(255);
	color color_picked = color(255,255,0);
	
	//
	// Constructor
	StencilClass( String filename, float maxrad )
	{
		// center on screen
		myCenter.set( width/2, height/2 );
		// Load file
		myName = filename;
		maxRadius = maxrad;
		myStencil = loadImage( filename, "", this.loaded );
		__print_console("stencil loading center "+myCenter.x+" "+myCenter.y+" "+filename);
	}
	void loaded()
	{
		myRadius = sqrt( pow(myStencil.width/2,2) + pow(myStencil.height/2,2) );
		// Resize to max size permitted
		if ( myRadius > maxRadius )
		{
			float sc = maxRadius / myRadius;
			myStencil.resize( myStencil.width*sc, myStencil.height*sc );
			myRadius = maxRadius;
		}
		__print_console("stencil loaded!!! w "+myStencil.width+" h "+myStencil.height+" r "+myRadius);
	}
	
	///////////////////////////
	//
	// DRAW
	//
	void draw( boolean drawPickers )
	{
		float x = -myStencil.width/2 * myScale;
		float y = -myStencil.height/2 * myScale;
		float w = myStencil.width * myScale;
		float h = myStencil.height * myScale;

		// not loaded!
		if (myRadius == 0)
			return;

		noFill();
		strokeWeight(2);
		
		// translate to center
		pushMatrix();
		translate( myCenter.x, myCenter.y );
		rotate( myRotation );
		
		// draw STENCIL
		image( myStencil, x, y, w, h );
		
		// draw RECT
		if (drawPickers)
		{
			//
			// rect
			stroke(color_shadow);
			rect( x, y, w, h );
			if (isMoving)
				stroke(color_picked);
			else if (inMoving)
				stroke(color_over);
			else
				stroke(color_off);
			rect( x-1, y-1, w, h );
			//
			// elipse
			float r = myRadius * myScale;
			stroke(color_shadow);
			ellipse( 0, 0, r*2, r*2 );
			if (isScaling)
				stroke(color_picked);
			else if (inScaling)
				stroke(color_over);
			else
				stroke(color_off);
			ellipse( -1, -1, r*2, r*2 );
			//
			// pickers
			if (false)
			{
				int pd = 15;
				noStroke();
				fill(0,150,255);
				ellipse( x, y, pd, pd );
				ellipse( x, y+h, pd, pd );
				ellipse( x+w, y, pd, pd );
				ellipse( x+w, y+h, pd, pd );
			}
		}
		
		popMatrix();
	}
	
	
	// Hover
	void mouseMoved()
	{
		inScaling = inMoving = false;
		if (myRadius==0)	// image not loaded
			return;
		float d = dist( myCenter.x, myCenter.y, mouseX, mouseY ) / myScale;
		if (myRadius*(1.0-pick_range) <= d && d <= myRadius*(1.0+pick_range))
			inScaling = true;
		else if (d < myRadius)
			inMoving = true;
		//__print_console("mouse "+mouseX+" "+mouseY+" d "+d+" r "+myRadius+" scaling "+inScaling+" moving "+inMoving+" center "+myCenter.x+" "+myCenter.y);
	}
	// Pick
	void mousePressed()
	{
		// for iPad
		mouseMoved()
		// Pick!
		isScaling = isMoving = false;
		if (inMoving)
			isMoving = true;
		else if (inScaling)
		{
			isScaling = true;
			lastScale = myScale;
			lastRotation = myRotation;
		}
		mousePos.set( mouseX, mouseY, 0 );
	}
	// Move
	void mouseDragged()
	{
		if (isMoving)
		{
			float dx = (mouseX - mousePos.x);
			float dy = (mouseY - mousePos.y);
			myCenter.x += dx;
			myCenter.y += dy;
			mousePos.set(mouseX, mouseY, 0);
		}
		else if (isScaling)
		{
			float d0 = dist( myCenter.x, myCenter.y, mousePos.x, mousePos.y );
			float d1 = dist( myCenter.x, myCenter.y, mouseX, mouseY );
			myScale = lastScale * ( d1 / d0 );
			if (myScale > 1.0)
				myScale = 1.0;
			else if (myScale < 0.2)
				myScale = 0.2;
			float a0 = AngleBetween( myCenter.x, myCenter.y, mousePos.x, mousePos.y );
			float a1 = AngleBetween( myCenter.x, myCenter.y, mouseX, mouseY );
			myRotation = lastRotation + (a1-a0);
		}
	}
	// Move
	void mouseReleased()
	{
		isScaling = isMoving = false;
	}
}



// Angulo enter 2 pontos
float AngleBetween(float x1, float y1, float x2, float y2)
{
	float a = atan2(y2-y1,x2-x1);
	if (a < 0.0) a += TWO_PI;
	//if (a >= TWO_PI) a -= TWO_PI;
	return(a);
}


